datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Theme {
    EDUCATION
    HEALTHCARE
    LIFESTYLE
    LIVELIHOOD
    CAREER_COUNSELLING
    GENERAL_COUNSELLING
    WELLNESS_COUNSELLING
}

enum RequestType {
    FINANCIAL
    NON_FINANCIAL
}

enum RequestStatus {
    APPROVAL_PENDING
    PENDING_UPLOADS
    UNDER_REVIEW
    COMPLETE
    REJECTED
}

model event {
    id          Int      @id @default(autoincrement())
    name        String
    agenda      String
    description String
    posterUrl   String
    startDate   DateTime
    endDate     DateTime
    theme       Theme
    location    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
}

model user {
    id               Int        @id @default(autoincrement())
    uid              String     @unique
    email            String     @unique
    password         String
    address          Json
    yearOfEnrolment  String
    name             String
    phoneNumber      String     @unique
    photoUrl         String     @default("")
    donationReceived Float
    request          request[]
    document         document[]
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @default(now())
}

model admin {
    id        Int       @id @default(autoincrement())
    uid       String    @unique
    email     String    @unique
    password  String
    name      String
    photoUrl  String    @default("")
    request   request[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now())
}

model request {
    id            Int           @id @default(autoincrement())
    type          RequestType
    theme         Theme
    description   String
    status        RequestStatus @default(APPROVAL_PENDING)
    userId        Int
    user          user          @relation(fields: [userId], references: [id], onDelete: Cascade)
    adminId       Int
    admin         admin         @relation(fields: [adminId], references: [id])
    donation      Float?
    fundsRequired Float?
    document      document?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @default(now())
}

model document {
    id        Int      @id @default(autoincrement())
    requestId Int      @unique
    request   request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
    userId    Int
    user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
    data      Json
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}
